package com.library.service;import com.library.domain.Author;import com.library.domain.Book;import com.library.repository.BooksRepository;import org.hibernate.PersistentObjectException;import org.hibernate.Session;import org.hibernate.Transaction;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.dao.DataIntegrityViolationException;import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import javax.persistence.EntityManager;import javax.persistence.EntityManagerFactory;import javax.persistence.Persistence;import java.sql.SQLIntegrityConstraintViolationException;import java.util.Collection;import java.util.List;import java.util.Optional;import java.util.function.Consumer;import java.util.function.Predicate;import java.util.stream.Collectors;import java.util.stream.Stream;@Servicepublic class BookService {    @Autowired    BooksRepository booksRepository;    @Autowired    AuthorService authorService;    public List<Book> getAllBooks() {        return booksRepository.findAll();    }    @Transactional    public Book saveBook(final Book book) {        List<Author>listAuthors = book.getAuthors().stream()                .collect(Collectors.toList());        try {            Stream.iterate(0, i  -> i + 1).                    limit(listAuthors.size())                    .forEach( (i) -> {                        listAuthors.get(i);                        Optional<Author> authorOptional = authorService.getIdByAuthorName(book.getAuthors().get(i).getForename(),                                listAuthors.get(i).getSurname());                        if (authorOptional.isPresent()) {                            Optional<Long> authorIdList = authorOptional.map(Author::getId);                            book.getAuthors().set(i, authorOptional.get());                        }                    });            booksRepository.save(book);        } catch (DataIntegrityViolationException dE) {            System.out.println("Entry already exist");        } catch (PersistentObjectException pE) {            System.out.println("Author already exist, but has added entry to join Table ");       }        catch(Exception ex) {            System.out.println("Other bug");        }        return book;    }    public Optional<Book> getBook(final Long id) {        return booksRepository.findById(id);    }    public void deleteBook(final Long id) {        booksRepository.deleteById(id);    }}